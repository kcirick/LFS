#!/bin/bash

# Setup tmp directory
VARDIR=/var/log
if [ ! -d $VARDIR/packages ]; then
   mkdir -p $VARDIR/packages
fi
if [ ! -d $VARDIR/removed_packages ]; then
   mkdir -p $VARDIR/removed_packages
fi

TMPDIR=$VARDIR/pkgtool_setup
if [ ! -d $TMPDIR ]; then
   rm -rf $TMPDIR
   mkdir -p $TMPDIR
   chmod 700 $TMPDIR
fi

install_package(){
   package=$1
   pkgname=$(echo $(basename $package _package.tar.xz))
   dirname=$(echo $(dirname $package))
   
   echo "Installing $pkgname from $dirname ..."

   echo "Verifying package $pkgname ..."
   cat $package | /bin/xz -dc | dd 2> $TMPDIR/tmpsize$$ | /bin/tar tf - 1> $TMPDIR/tmplist$$ 2> /dev/null
   TARERROR=$?
   
   if [ ! "$TARERROR" = "0" ]; then
      echo "Unable to install $pkgname: file $package is corrupt (error code $TARERROR)"
      rm -f $TMPDIR/tmplist$$ $TMPDIR/tmpsize$$
      exit 1
   fi
   SIZE_COMPRESSED="$(/usr/bin/du -sh "$(readlink -f $package)" | cut -f 1)"
   SIZE_UNCOMPRESSED="$(expr $(cat $TMPDIR/tmpsize$$ | head -n 1 | cut -f 1 -d +) / 2)"
   if [ $SIZE_UNCOMPRESSED -lt 1024 ]; then
      SIZE_UNCOMPRESSED="${SIZE_UNCOMPRESSED}K"
   else
      SIZE_UNCOMPRESSED="$(expr ${SIZE_UNCOMPRESSED} / 1024)M"
   fi
   rm -rf $TMPDIR/tmpsize$$

   echo "Package size of $pkgname: $SIZE_COMPRESSED -> $SIZE_UNCOMPRESSED"
   
   # Write package information database entry
   echo "PACKAGE NAME:              $pkgname"             > $VARDIR/packages/${pkgname}_package.txt
   echo "COMPRESSED SIZE:           $SIZE_COMPRESSED"    >> $VARDIR/packages/${pkgname}_package.txt
   echo "UNCOMPRESSED SIZE:         $SIZE_UNCOMPRESSED"  >> $VARDIR/packages/${pkgname}_package.txt
   echo "PACKAGE LOCATION:          $package"            >> $VARDIR/packages/${pkgname}_package.txt
   # Extract file and put the file list into the database
   echo "FILE LIST:" >> $VARDIR/packages/${pkgname}_package.txt
   (cd / ; /bin/tar --strip-components=1 -xpvf $package) >> $TMPDIR/${pkgname}_package 2> /dev/null
   if [ "$(head $TMPDIR/${pkgname}_package -n 1 | awk -F'/' '{print $1}')" = "${pkgname}_package" ]; then
      # Good
      cat $TMPDIR/${pkgname}_package | sed -e 's/\//:\//' >> $VARDIR/packages/${pkgname}_package.txt
   else
      echo "WARNING: Package was not created properly. Please retry again."
      exit 1
   fi
   rm -rf $TMPDIR/${pkgname}_package

   install_date=`date +%m-%d-%Y`
   echo "INSTALL DATE:         $install_date"              >> $VARDIR/packages/${pkgname}_package.txt

   # Go through the post-installation scripts
   if [ -x /sbin/ldconfig ]; then
      /sbin/ldconfig
   fi

   if [ -f /install/post_installation.sh ]; then
      echo "Executing post_installation.sh for $pkgname ..."
      (cd / ; sh install/post_installation.sh;)
      rm -rf /install;
   fi

   echo "Package $pkgname was successfully installed!"
   echo
}

uninstall_package(){
   pkgname=$(echo $(basename $1 _package.tar.xz))

   echo "Uninstalling $pkgname ..."
   if [ ! -e $VARDIR/packages/${pkgname}_package.txt ]; then
      echo "Package ${pkgname} doesn't exists in the database!"
      exit 1
   fi

   cat $VARDIR/packages/${pkgname}_package.txt | grep "^${pkgname}_package" | \
      awk -F':' '{print $2}' | sort -r > $TMPDIR/delete_list$$

   for line in $(cat $TMPDIR/delete_list$$); do
      rm -fd $line
   done

   rm_date=`date +%m-%d-%Y`
   mv $VARDIR/packages/${pkgname}_package.txt $VARDIR/removed_packages/
   echo "UNINSTALL DATE:       $rm_date"               >> $VARDIR/removed_packages/${pkgname}_package.txt

   echo "Package $pkgname was successfully uninstalled!"
   echo
}

check_package(){
   search_tag=$1

   echo "--- INSTALLED LIST ---"
   for file in `ls -1 $VARDIR/packages`; do
      this_package=$(basename $(echo $file) _package.txt)
      inst_date=`cat $VARDIR/packages/$file | grep "INSTALL DATE" | awk -F' ' '{print $3}'`

      if [ "$search_tag" != "" ]; then
         if [[ $this_package == *"$search_tag"* ]]; then
            echo "   $this_package on $inst_date"
         fi
      else
         echo "   $this_package on $inst_date"
      fi
   done
   echo

   echo "--- UNINSTALLED LIST ---"
   for file in `ls -1 $VARDIR/removed_packages`; do
      this_package=$(basename $(echo $file) _package.txt)
      rm_date=`cat $VARDIR/removed_packages/$file | grep "UNINSTALL DATE" | awk -F' ' '{print $3}'`
      if [ "$search_tag" != "" ]; then
         if [[ $this_package == *"$search_tag"* ]]; then
            echo "   $this_package on $rm_date"
         fi
      else
         echo "   $this_package on $rm_date"
      fi
   done
}


#--- Main Program ---------
if [ "$#" = "0" ]; then
   echo "Invalid param"; exit 1
fi

case "$1" in
   --install )    MODE="INSTALL";;
   --uninstall )  MODE="UNINSTALL";;
   --check )      MODE="CHECK";;
   *) echo "Invalid param"; exit 1;;
esac

if [ "$MODE" == "INSTALL" ]; then
   install_package $2
fi
if [ "$MODE" == "UNINSTALL" ]; then
   uninstall_package $2
fi
if [ "$MODE" == "CHECK" ]; then
   check_package $2
fi
